function isLoggedIn() {
  const userProps = PropertiesService.getUserProperties();
  if (userProps.getProperty(LOGIN_KEY) !== null) {
    return "login";
  } else {
    const payload = getPreviousEmail();
    if (payload) {
      return "pending";
    } else {
      return "logout";
    }
  }
}

function isEmailAuthorized(email) {
  const sheet = SpreadsheetApp.openById(SHEET_USER_ID);
  const emails = sheet.getRange("A:A").getValues().flat();
  if (emails) {
    emails.splice(0, 1);
    return emails.includes(email);
  } else {
    throw new Error("cnanot reade sheet file");
  }
}

function resendOTP() {
  const payload = getPreviousEmail();
  if (payload) {
    if (isEmailAuthorized(payload.email)) {
      const cache = CacheService.getUserCache();
      cache.remove(CACHE_KEY);
      const otp = generateOTP();
      sendOTP(payload.email, otp);
      cacheOTP(payload.email, otp);
    }
  }
  return {
    status: true,
    title: "‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏àüìß.",
    message:
      "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gmail ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ôüì•.",
    html: null,
  };
}

function getPreviousEmail() {
  const cache = CacheService.getUserCache();
  const storedOTP = cache.get(CACHE_KEY);
  const payload = JSON.parse(storedOTP);
  return payload || null;
}

function verifyOTP(userOTP) {
  const cache = CacheService.getUserCache();
  const storedOTP = cache.get(CACHE_KEY);
  const payload = JSON.parse(storedOTP);
  if (payload && payload.otp === userOTP) {
    cache.remove(CACHE_KEY);
    PropertiesService.getUserProperties().setProperty(LOGIN_KEY, payload.email);
    const html = HtmlService.createHtmlOutputFromFile("MainPage").getContent();
    return {
      status: true,
      title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏àüòä.",
      message:
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µüè´.",
      html,
    };
  } else {
    return {
      status: false,
      title: "‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‚ùå.",
      message:
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gmail ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.",
      html: null,
    };
  }
}

function cacheOTP(email, otp) {
  const cache = CacheService.getUserCache();
  const payload = { email, otp };
  cache.put(CACHE_KEY, JSON.stringify(payload), 300); // Cache for 5 minutes (300 seconds)
}

function generateOTP() {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let otp = "";
  for (let i = 0; i < 5; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    otp += characters[randomIndex];
  }
  return otp;
}
function sendOTP(email, otp) {
  const subject = "‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£";
  const body = `‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${otp}. ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ`;
  GmailApp.sendEmail(email, subject, body);
}
function checkEmailAndSendOTP(email) {
  if (isEmailAuthorized(email)) {
    const otp = generateOTP();
    sendOTP(email, otp);
    cacheOTP(email, otp);
    const pinPage =
      HtmlService.createHtmlOutputFromFile("LoginPin").getContent();
    return {
      status: true,
      title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‚úî",
      message: "‡∏ó‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏öüè´",
      html: pinPage,
    };
  } else {
    return {
      status: false,
      title: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‚ùå",
      message:
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Gmail ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏≤‡∏Å‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏öüôè.",
      html: null,
    };
  }
}

function logout() {
  PropertiesService.getUserProperties().deleteProperty(LOGIN_KEY);
  const html = HtmlService.createHtmlOutputFromFile("Login").getContent();

  return {
    status: true,
    title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏àüëã.",
    message: "‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà...",
    html,
  };
}
function setCacheWithExpiration(key, value) {
  const cache = CacheService.getScriptCache();
  const expirationInSeconds = 20 * 60 * 60; //20 hours
  cache.put(key, JSON.stringify(value), expirationInSeconds);
}
function getCachedData(key) {
  const cache = CacheService.getScriptCache();
  const cached = cache.get(key);
  return cached ? JSON.parse(cached) : null;
}
